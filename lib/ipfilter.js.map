{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","module","exports","ipfilter","ips","opts","logger","message","console","log","settings","defaults","mode","logF","allowedHeaders","allowPrivateIPs","excluding","getClientIp","req","ipAddress","headerIp","reduce","acc","header","testIp","headers","splitHeaderIp","split","length","connection","remoteAddress","indexOf","matchClientIp","ip","toLowerCase","result","invoke","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","startIp","toLong","endIp","longIp","res","next","results","exclude","regex","RegExp","test","url","logLevel","err"],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\r\n * Express - IP Filter\r\n * Copyright(c) 2014 Bradley and Montgomery Inc.\r\n * MIT Licensed\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * Module dependencies.\r\n */\r\nvar _ = require('lodash');\r\nvar iputil = require('ip');\r\nvar rangeCheck = require('range_check');\r\nvar IpDeniedError = require('./deniedError');\r\n\r\n/**\r\n * express-ipfilter:\r\n *\r\n * IP Filtering middleware;\r\n *\r\n * Examples:\r\n *\r\n *      var ipfilter = require('ipfilter'),\r\n *          ips = ['127.0.0.1'];\r\n *\r\n *      app.use(ipfilter(ips));\r\n *\r\n * Options:\r\n *\r\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\r\n *  - `logF` Function to use for logging.\r\n *  - `log` console log actions. Defaults to true.\r\n *  - `allowPrivateIPs` whether to allow private IPs.\r\n *  - `allowedHeaders` Array of headers to check for forwarded IPs.\r\n *  - 'excluding' routes that should be excluded from ip filtering\r\n *\r\n * @param [ips] {Array} IP addresses\r\n * @param [opts] {Object} options\r\n * @api public\r\n */\r\nmodule.exports = function ipfilter(ips, opts) {\r\n  ips = ips || false;\r\n\r\n  var logger = function(message){ console.log(message);};\r\n  var settings = _.defaults( opts || {}, {\r\n    mode: 'deny',\r\n    log: true,\r\n    logF: logger,\r\n    allowedHeaders: [],\r\n    allowPrivateIPs: false,\r\n    excluding: []\r\n  });\r\n\r\n  var getClientIp = function(req) {\r\n    var ipAddress;\r\n\r\n    var headerIp = _.reduce(settings.allowedHeaders, function(acc, header){\r\n      var testIp = req.headers[header];\r\n      if(testIp!= ''){\r\n        acc = testIp;\r\n      }\r\n\r\n      return acc;\r\n    },'');\r\n\r\n    if(headerIp) {\r\n      var splitHeaderIp = headerIp.split(',');\r\n      ipAddress = splitHeaderIp[splitHeaderIp.length-1];\r\n    }\r\n\r\n    if(!ipAddress) {\r\n      ipAddress = req.connection.remoteAddress;\r\n    }\r\n\r\n    if(!ipAddress){\r\n      return '';\r\n    }\r\n\r\n    if(ipAddress.indexOf(':') !== -1 && ipAddress.indexOf('::') === -1){\r\n      ipAddress = ipAddress.split(':')[0];\r\n    }\r\n\r\n    return ipAddress;\r\n  };\r\n\r\n  var matchClientIp = function(ip){\r\n    var mode = settings.mode.toLowerCase();\r\n\r\n    var result = _.invoke(ips,testIp,ip,mode);\r\n\r\n    if(mode === 'allow'){\r\n      return _.some(result);\r\n    }else{\r\n      return _.every(result);\r\n    }\r\n  };\r\n\r\n  var testIp = function(ip,mode){\r\n    var constraint = this;\r\n\r\n    // Check if it is an array or a string\r\n    if(typeof constraint === 'string'){\r\n      if(rangeCheck.validRange(constraint)){\r\n        return testCidrBlock(ip,constraint,mode);\r\n      }else{\r\n        return testExplicitIp(ip,constraint,mode);\r\n      }\r\n    }\r\n\r\n    if(typeof constraint === 'object'){\r\n      return testRange(ip,constraint,mode);\r\n    }\r\n  };\r\n\r\n  var testExplicitIp = function(ip,constraint,mode){\r\n    if(ip === constraint){\r\n      return mode === 'allow';\r\n    }else{\r\n      return mode === 'deny';\r\n    }\r\n  };\r\n\r\n  var testCidrBlock = function(ip,constraint,mode){\r\n    if(rangeCheck.inRange(ip, constraint)){\r\n      return mode === 'allow';\r\n    }else{\r\n      return mode === 'deny';\r\n    }\r\n  };\r\n\r\n  var testRange = function(ip,constraint,mode){\r\n    var filteredSet = _.filter(ips,function(constraint){\r\n      if(constraint.length > 1){\r\n        var startIp = iputil.toLong(constraint[0]);\r\n        var endIp = iputil.toLong(constraint[1]);\r\n        var longIp = iputil.toLong(ip);\r\n        return  longIp >= startIp && longIp <= endIp;\r\n      }else{\r\n        return ip === constraint[0];\r\n      }\r\n    });\r\n\r\n    if(filteredSet.length > 0){\r\n      return mode === 'allow';\r\n    }else{\r\n      return mode === 'deny';\r\n    }\r\n  };\r\n\r\n  return function(req, res, next) {\r\n    if(settings.excluding.length > 0){\r\n      var results = _.filter(settings.excluding,function(exclude){\r\n        var regex = new RegExp(exclude);\r\n        return regex.test(req.url);\r\n      });\r\n\r\n      if(results.length > 0){\r\n        if(settings.log){\r\n          logger('Access granted for excluded path: ' + results[0]);\r\n        }\r\n        return next();\r\n      }\r\n    }\r\n\r\n    var ip = getClientIp(req);\r\n    // If no IPs were specified, skip\r\n    // this middleware\r\n    if(!ips || !ips.length) { return next(); }\r\n\r\n    if(matchClientIp(ip,req)) {\r\n      // Grant access\r\n      if(settings.log && settings.logLevel !== 'deny') {\r\n        settings.logF('Access granted to IP address: ' + ip);\r\n      }\r\n\r\n      return next();\r\n    }\r\n\r\n    // Deny access\r\n    if(settings.log && settings.logLevel !== 'allow') {\r\n      settings.logF('Access denied to IP address: ' + ip);\r\n    }\r\n\r\n    var err = new IpDeniedError('Access denied to IP address: ' + ip);\r\n    return next(err);\r\n  };\r\n};\r\n"]}